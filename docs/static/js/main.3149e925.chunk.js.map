{"version":3,"sources":["hooks/useWordGame.js","App.js","reportWebVitals.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","handleChange","e","value","target","calculateWordCount","trim","split","filter","word","length","startGame","current","disabled","focus","endGame","useEffect","setTimeout","time","App","ref","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+KA6CeA,MA3Cf,WAAyC,IAApBC,EAAmB,uDAAJ,GAChC,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,mBAASD,GAAnD,mBAAOI,EAAP,KAAsBC,EAAtB,KACA,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KACA,EAAkCN,mBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACMC,EAAaC,iBAAO,MAE1B,SAASC,EAAaC,GAClB,IAAQC,EAAUD,EAAEE,OAAZD,MACRX,EAAQW,GAGZ,SAASE,EAAmBd,GAExB,OADiBA,EAAKe,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAGhD,SAASC,IACLf,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWa,QAAQC,UAAW,EAC9Bd,EAAWa,QAAQE,QAGvB,SAASC,IACLnB,GAAiB,GACjBE,EAAaO,EAAmBd,IAapC,OAVAyB,qBAAU,WACFrB,GAAiBF,EAAgB,EACjCwB,YAAW,WACPvB,GAAiB,SAAAwB,GAAI,OAAIA,EAAO,OACjC,KACsB,IAAlBzB,GACPsB,MAEL,CAACtB,EAAeE,IAEZ,CAAEI,aAAYE,eAAcV,OAAMI,gBAAeF,gBAAekB,YAAWd,c,OCPvEsB,MAhCf,WACE,MAQI/B,EAAY,IAPdW,EADF,EACEA,WACAE,EAFF,EAEEA,aACAV,EAHF,EAGEA,KACAI,EAJF,EAIEA,cACAF,EALF,EAKEA,cACAkB,EANF,EAMEA,UACAd,EAPF,EAOEA,UAGF,OACE,gCACE,uDACA,0BACEuB,IAAKrB,EACLsB,SAAUpB,EACVE,MAAOZ,EACPsB,UAAWlB,IAEb,kDAAqBF,KACrB,wBACE6B,QAASX,EACTE,SAAUlB,EAFZ,mBAMA,8CAAiBE,SClBR0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,K","file":"static/js/main.3149e925.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nfunction useWordGame(startingTime = 15) {\n    const [text, setText] = useState(\"\")\n    const [timeRemaining, setTimeRemaining] = useState(startingTime)\n    const [isTimeRunning, setIsTimeRunning] = useState(false)\n    const [wordCount, setWordCount] = useState(0)\n    const textBoxRef = useRef(null)\n\n    function handleChange(e) {\n        const { value } = e.target\n        setText(value)\n    }\n\n    function calculateWordCount(text) {\n        const wordsArr = text.trim().split(\" \")\n        return wordsArr.filter(word => word !== \"\").length\n    }\n\n    function startGame() {\n        setIsTimeRunning(true)\n        setTimeRemaining(startingTime)\n        setText(\"\")\n        textBoxRef.current.disabled = false\n        textBoxRef.current.focus()\n    }\n\n    function endGame() {\n        setIsTimeRunning(false)\n        setWordCount(calculateWordCount(text))\n    }\n\n    useEffect(() => {\n        if (isTimeRunning && timeRemaining > 0) {\n            setTimeout(() => {\n                setTimeRemaining(time => time - 1)\n            }, 1000)\n        } else if (timeRemaining === 0) {\n            endGame()\n        }\n    }, [timeRemaining, isTimeRunning])\n\n    return { textBoxRef, handleChange, text, isTimeRunning, timeRemaining, startGame, wordCount }\n}\n\nexport default useWordGame\n","import React, { useState, useEffect, useRef } from \"react\";\nimport useWordGame from \"./hooks/useWordGame\";\n\nfunction App() {\n  const {\n    textBoxRef,\n    handleChange,\n    text,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount\n  } = useWordGame(20);\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea\n        ref={textBoxRef}\n        onChange={handleChange}\n        value={text}\n        disabled={!isTimeRunning}\n      />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button\n        onClick={startGame}\n        disabled={isTimeRunning}\n      >\n        Start\n      </button>\n      <h1>Word count: {wordCount}</h1>\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}